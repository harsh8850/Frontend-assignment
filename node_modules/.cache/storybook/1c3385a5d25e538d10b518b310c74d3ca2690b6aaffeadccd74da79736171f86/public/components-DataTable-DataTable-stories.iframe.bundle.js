"use strict";
(globalThis["webpackChunkui_components"] = globalThis["webpackChunkui_components"] || []).push([["components-DataTable-DataTable-stories"],{

/***/ "./src/components/DataTable/DataTable.stories.tsx":
/*!********************************************************!*\
  !*** ./src/components/DataTable/DataTable.stories.tsx ***!
  \********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Empty: () => (/* binding */ Empty),
/* harmony export */   Loading: () => (/* binding */ Loading),
/* harmony export */   Selectable: () => (/* binding */ Selectable),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _DataTable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataTable */ "./src/components/DataTable/DataTable.tsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");


const meta = {
  title: "Components/DataTable",
  component: _DataTable__WEBPACK_IMPORTED_MODULE_0__.DataTable,
  tags: ["autodocs"]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const sampleData = [{
  id: 1,
  name: "John Doe",
  age: 25
}, {
  id: 2,
  name: "Jane Smith",
  age: 30
}, {
  id: 3,
  name: "Sam Wilson",
  age: 28
}];

// instead of dataIndex: "id"
const sampleColumns = [{
  key: "id",
  title: "ID",
  dataIndex: "id"
}, {
  key: "name",
  title: "Name",
  dataIndex: "name"
}, {
  key: "age",
  title: "Age",
  dataIndex: "age"
}];
const Default = {
  args: {
    data: sampleData,
    columns: sampleColumns
  }
};
const Selectable = {
  args: {
    data: sampleData,
    columns: sampleColumns,
    selectable: true
  }
};
const Loading = {
  args: {
    data: [],
    columns: sampleColumns,
    loading: true
  }
};
const Empty = {
  args: {
    data: [],
    columns: sampleColumns
  }
};
;
const __namedExportsOrder = ["Default", "Selectable", "Loading", "Empty"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    data: sampleData,\n    columns: sampleColumns\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
Selectable.parameters = {
  ...Selectable.parameters,
  docs: {
    ...Selectable.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    data: sampleData,\n    columns: sampleColumns,\n    selectable: true\n  }\n}",
      ...Selectable.parameters?.docs?.source
    }
  }
};
Loading.parameters = {
  ...Loading.parameters,
  docs: {
    ...Loading.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    data: [],\n    columns: sampleColumns,\n    loading: true\n  }\n}",
      ...Loading.parameters?.docs?.source
    }
  }
};
Empty.parameters = {
  ...Empty.parameters,
  docs: {
    ...Empty.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    data: [],\n    columns: sampleColumns\n  }\n}",
      ...Empty.parameters?.docs?.source
    }
  }
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/components/DataTable/DataTable.tsx":
/*!************************************************!*\
  !*** ./src/components/DataTable/DataTable.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataTable: () => (/* binding */ DataTable)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "E:\\Frontend assignment\\src\\components\\DataTable\\DataTable.tsx",
  _s = __webpack_require__.$Refresh$.signature();


function DataTable({
  data,
  columns,
  loading,
  selectable,
  onRowSelect
}) {
  _s();
  const [selectedRows, setSelectedRows] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const toggleRow = row => {
    let updated = [];
    if (selectedRows.includes(row)) {
      updated = selectedRows.filter(r => r !== row);
    } else {
      updated = [...selectedRows, row];
    }
    setSelectedRows(updated);
    onRowSelect === null || onRowSelect === void 0 ? void 0 : onRowSelect(updated);
  };
  if (loading) return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
    children: "Loading..."
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 32,
    columnNumber: 23
  }, this);
  if (!data.length) return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
    children: "No data available"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 33,
    columnNumber: 28
  }, this);
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("table", {
    className: "min-w-full border border-gray-300",
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("thead", {
      className: "bg-gray-100",
      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("tr", {
        children: [selectable && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("th", {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 39,
          columnNumber: 26
        }, this), columns.map(col => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("th", {
          className: "px-4 py-2 text-left border-b",
          children: col.title
        }, col.key, false, {
          fileName: _jsxFileName,
          lineNumber: 41,
          columnNumber: 13
        }, this))]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 38,
        columnNumber: 9
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 37,
      columnNumber: 7
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("tbody", {
      children: data.map((row, i) => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("tr", {
        className: "border-b",
        children: [selectable && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("td", {
          className: "px-4",
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("input", {
            type: "checkbox",
            checked: selectedRows.includes(row),
            onChange: () => toggleRow(row)
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 50,
            columnNumber: 17
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 49,
          columnNumber: 15
        }, this), columns.map(col => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("td", {
          className: "px-4 py-2",
          children: String(row[col.dataIndex])
        }, col.key, false, {
          fileName: _jsxFileName,
          lineNumber: 54,
          columnNumber: 15
        }, this))]
      }, i, true, {
        fileName: _jsxFileName,
        lineNumber: 47,
        columnNumber: 11
      }, this))
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 45,
      columnNumber: 7
    }, this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 36,
    columnNumber: 5
  }, this);
}
_s(DataTable, "kE+zebKPJPLpKtm4LqE61mD+8P8=");
_c = DataTable;
;
DataTable.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "DataTable",
  "props": {
    "data": {
      "required": true,
      "tsType": {
        "name": "Array",
        "elements": [{
          "name": "T"
        }],
        "raw": "T[]"
      },
      "description": ""
    },
    "columns": {
      "required": true,
      "tsType": {
        "name": "Array",
        "elements": [{
          "name": "Column",
          "elements": [{
            "name": "T"
          }],
          "raw": "Column<T>"
        }],
        "raw": "Column<T>[]"
      },
      "description": ""
    },
    "loading": {
      "required": false,
      "tsType": {
        "name": "boolean"
      },
      "description": ""
    },
    "selectable": {
      "required": false,
      "tsType": {
        "name": "boolean"
      },
      "description": ""
    },
    "onRowSelect": {
      "required": false,
      "tsType": {
        "name": "signature",
        "type": "function",
        "raw": "(selectedRows: T[]) => void",
        "signature": {
          "arguments": [{
            "type": {
              "name": "Array",
              "elements": [{
                "name": "T"
              }],
              "raw": "T[]"
            },
            "name": "selectedRows"
          }],
          "return": {
            "name": "void"
          }
        }
      },
      "description": ""
    }
  }
};
var _c;
__webpack_require__.$Refresh$.register(_c, "DataTable");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

}]);
//# sourceMappingURL=components-DataTable-DataTable-stories.iframe.bundle.js.map
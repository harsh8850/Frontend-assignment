{"version":3,"file":"components-DataTable-DataTable-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AAAA;AAisources":["webpack://ui-components/../Frontend%20assignment/src/components/DataTable/DataTable.stories.tsx","webpack://ui-components/../Frontend%20assignment/src/components/DataTable/DataTable.tsx"],"sourcesContent":["import type { Meta, StoryObj } from \"@storybook/react\";\nimport { DataTable } from \"./DataTable\";\n\ninterface User {\n  id: number;\n  name: string;\n  age: number;\n}\n\nconst meta: Meta<typeof DataTable<User>> = {\n  title: \"Components/DataTable\",\n  component: DataTable<User>,\n  tags: [\"autodocs\"],\n};\nexport default meta;\n\ntype Story = StoryObj<typeof DataTable<User>>;\n\nconst sampleData: User[] = [\n  { id: 1, name: \"John Doe\", age: 25 },\n  { id: 2, name: \"Jane Smith\", age: 30 },\n  { id: 3, name: \"Sam Wilson\", age: 28 },\n];\n\n// instead of dataIndex: \"id\"\nconst sampleColumns = [\n  { key: \"id\", title: \"ID\", dataIndex: \"id\" as const },\n  { key: \"name\", title: \"Name\", dataIndex: \"name\" as const },\n  { key: \"age\", title: \"Age\", dataIndex: \"age\" as const },\n];\n\nexport const Default: Story = {\n  args: {\n    data: sampleData,\n    columns: sampleColumns,\n  },\n};\n\nexport const Selectable: Story = {\n  args: {\n    data: sampleData,\n    columns: sampleColumns,\n    selectable: true,\n  },\n};\n\nexport const Loading: Story = {\n  args: {\n    data: [],\n    columns: sampleColumns,\n    loading: true,\n  },\n};\n\nexport const Empty: Story = {\n  args: {\n    data: [],\n    columns: sampleColumns,\n  },\n};\n","import React, { useState } from 'react';\n\nexport interface Column<T> {\n  key: string;\n  title: string;\n  dataIndex: keyof T;\n  sortable?: boolean;\n}\n\nexport interface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  loading?: boolean;\n  selectable?: boolean;\n  onRowSelect?: (selectedRows: T[]) => void;\n}\n\nexport function DataTable<T>({ data, columns, loading, selectable, onRowSelect }: DataTableProps<T>) {\n  const [selectedRows, setSelectedRows] = useState<T[]>([]);\n\n  const toggleRow = (row: T) => {\n    let updated: T[] = [];\n    if (selectedRows.includes(row)) {\n      updated = selectedRows.filter(r => r !== row);\n    } else {\n      updated = [...selectedRows, row];\n    }\n    setSelectedRows(updated);\n    onRowSelect?.(updated);\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (!data.length) return <div>No data available</div>;\n\n  return (\n    <table className=\"min-w-full border border-gray-300\">\n      <thead className=\"bg-gray-100\">\n        <tr>\n          {selectable && <th></th>}\n          {columns.map(col => (\n            <th key={col.key} className=\"px-4 py-2 text-left border-b\">{col.title}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row, i) => (\n          <tr key={i} className=\"border-b\">\n            {selectable && (\n              <td className=\"px-4\">\n                <input type=\"checkbox\" checked={selectedRows.includes(row)} onChange={() => toggleRow(row)} />\n              </td>\n            )}\n            {columns.map(col => (\n              <td key={col.key} className=\"px-4 py-2\">{String(row[col.dataIndex])}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}"],"names":[],"sourceRoot":""}
{"version":3,"file":"components-InputField-InputField-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAvFA","sources":["webpack://ui-components/../Frontend%20assignment/src/components/InputField/InputField.stories.tsx","webpack://ui-components/../Frontend%20assignment/src/components/InputField/InputField.tsx"],"sourcesContent":["import type { Meta, StoryObj } from \"@storybook/react\";\nimport { InputField } from \"./InputField\";\n\nconst meta: Meta<typeof InputField> = {\n  title: \"Components/InputField\",\n  component: InputField,\n  tags: [\"autodocs\"],\n};\nexport default meta;\n\ntype Story = StoryObj<typeof InputField>;\n\nexport const Default: Story = {\n  args: {\n    label: \"Username\",\n    placeholder: \"Enter username\",\n    helperText: \"This is a helper text\",\n  },\n};\n\nexport const Invalid: Story = {\n  args: {\n    label: \"Email\",\n    placeholder: \"Enter email\",\n    invalid: true,\n    errorMessage: \"Invalid email address\",\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    label: \"Password\",\n    placeholder: \"Enter password\",\n    disabled: true,\n  },\n};\n\nexport const Variants: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4 w-80\">\n      <InputField label=\"Outlined\" placeholder=\"Outlined\" variant=\"outlined\" />\n      <InputField label=\"Filled\" placeholder=\"Filled\" variant=\"filled\" />\n      <InputField label=\"Ghost\" placeholder=\"Ghost\" variant=\"ghost\" />\n    </div>\n  ),\n};\n\nexport const WithClearButton: Story = {\n  args: {\n    label: \"Search\",\n    placeholder: \"Type something...\",\n    clearable: true,\n  },\n};\n\nexport const PasswordToggle: Story = {\n  args: {\n    label: \"Password\",\n    placeholder: \"Enter password\",\n    togglePassword: true,\n    type: \"password\",\n  },\n};\n\nexport const DarkTheme: Story = {\n  args: {\n    label: \"Dark Mode Input\",\n    placeholder: \"Type here...\",\n    helperText: \"Dark theme example\",\n    theme: \"dark\",\n    variant: \"outlined\",\n    clearable: true,\n  },\n};\n\nexport const CombinedDemo: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4 w-96\">\n      <InputField label=\"Search with Clear\" placeholder=\"Search...\" clearable />\n      <InputField\n        label=\"Password with Toggle\"\n        placeholder=\"Enter password\"\n        togglePassword\n        type=\"password\"\n      />\n      <InputField\n        label=\"Dark Mode Search\"\n        placeholder=\"Dark input...\"\n        clearable\n        theme=\"dark\"\n        variant=\"outlined\"\n      />\n      <InputField\n        label=\"Dark Mode Password\"\n        placeholder=\"Enter password\"\n        togglePassword\n        type=\"password\"\n        theme=\"dark\"\n      />\n    </div>\n  ),\n};\n","import React, { useState } from \"react\";\n\nexport interface InputFieldProps {\n  value?: string;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  label?: string;\n  placeholder?: string;\n  helperText?: string;\n  errorMessage?: string;\n  disabled?: boolean;\n  invalid?: boolean;\n  variant?: \"filled\" | \"outlined\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  type?: \"text\" | \"password\";\n  clearable?: boolean;\n  togglePassword?: boolean;\n  theme?: \"light\" | \"dark\";\n}\n\nconst sizeClasses = {\n  sm: \"px-2 py-1 text-sm\",\n  md: \"px-3 py-2 text-base\",\n  lg: \"px-4 py-3 text-lg\",\n};\n\nconst variantClasses = {\n  filled: \"bg-gray-100 border border-gray-300\",\n  outlined: \"border border-gray-400\",\n  ghost: \"bg-transparent border-b border-gray-400\",\n};\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  value,\n  onChange,\n  label,\n  placeholder,\n  helperText,\n  errorMessage,\n  disabled,\n  invalid,\n  variant = \"outlined\",\n  size = \"md\",\n  type = \"text\",\n  clearable = false,\n  togglePassword = false,\n  theme = \"light\",\n}) => {\n  const [internalValue, setInternalValue] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const currentValue = value !== undefined ? value : internalValue;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(e);\n    else setInternalValue(e.target.value);\n  };\n\n  const handleClear = () => {\n    if (onChange) {\n      onChange({\n        target: { value: \"\" },\n      } as React.ChangeEvent<HTMLInputElement>);\n    } else {\n      setInternalValue(\"\");\n    }\n  };\n\n  const themeClasses =\n    theme === \"dark\"\n      ? \"bg-gray-800 text-white placeholder-gray-400\"\n      : \"bg-white text-black placeholder-gray-500\";\n\n  return (\n    <div className=\"flex flex-col gap-1 w-full\">\n      {label && <label className=\"font-medium\">{label}</label>}\n      <div className=\"relative flex items-center\">\n        <input\n          type={togglePassword ? (showPassword ? \"text\" : \"password\") : type}\n          value={currentValue}\n          onChange={handleChange}\n          placeholder={placeholder}\n          disabled={disabled}\n          aria-invalid={invalid}\n          className={`rounded w-full ${sizeClasses[size]} ${\n            variantClasses[variant]\n          } ${themeClasses} ${invalid ? \"border-red-500\" : \"\"} ${\n            disabled ? \"bg-gray-200 cursor-not-allowed\" : \"\"\n          }`}\n        />\n\n        {clearable && currentValue && !disabled && (\n          <button\n            type=\"button\"\n            onClick={handleClear}\n            className=\"absolute right-2 text-gray-500 hover:text-black\"\n          >\n            ‚úï\n          </button>\n        )}\n        {togglePassword && !disabled && (\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword((prev) => !prev)}\n            className=\"absolute right-2 text-gray-500 hover:text-black\"\n          >\n            {showPassword ? \"üôà\" : \"üëÅÔ∏è\"}\n          </button>\n        )}\n      </div>\n\n      {helperText && !invalid && (\n        <span className=\"text-xs text-gray-500\">{helperText}</span>\n      )}\n      {invalid && errorMessage && (\n        <span className=\"text-xs text-red-500\">{errorMessage}</span>\n      )}\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}